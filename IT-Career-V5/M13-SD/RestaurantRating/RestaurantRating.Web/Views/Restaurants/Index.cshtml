@using RestaurantRating.Common
@model IndexRestaurantsViewModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create" class="btn btn-primary">Create New</a>
</p>
<form asp-action="Index" method="get">
<div class="input-group mb-3">
    <button type="submit"  class="btn btn-outline-secondary">Search</button>
    <input asp-for="Filter" type="text" class="form-control" placeholder="Search" aria-label="Search" aria-describedby="basic-addon2">
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Image
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Restaurants)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    <img src="data:image/png;base64,@Html.DisplayFor(modelItem => item.Image)" height="100" width="250">
                </td>
                <td>
                   @if (User.IsInRole(GlobalConstants.UserRole))
                    {
                        <a asp-action="Review" asp-route-id="@item.Id" class="btn btn-success"><i class="fa-solid fa-star"></i></a>
                    }
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info"><i class="fa-solid fa-circle-info"></i></a> 
                    @if (User.IsInRole(GlobalConstants.AdminRole))
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-light"><i class="fa-solid fa-pen-to-square"></i></a>
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger"><i class="fa-solid fa-trash"></i></a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    Dictionary<string, string> routs = new Dictionary<string, string>()
    {

        {"page",Model.Filter },
        {"filter",Model.Filter },

    };
}
<nav aria-label="..." class="">
    <ul class="pagination  justify-content-center ">
        <li class="page-item @if (!Model.HasPreviousPage) {
        <text>disabled</text>
 }">
            <a class="page-link" asp-action="@Model.Action"  asp-all-route-data="routs" asp-route-page="@Model.PreviousPageNumber">
                <i class="fas fa-step-backward"></i>

            </a>
        </li>
        @for (int i = Model.Page - 2; i < Model.Page; i++)
        {
            if (i > 0)
            {
                <li class="page-item"><a class="page-link" asp-action="@Model.Action" asp-all-route-data="routs" asp-route-page="@i">@i</a></li>
            }
        }
        <li class="page-item active" aria-current="page">
            <span class="page-link">
                @Model.Page
                <span class="sr-only">(current)</span>
            </span>
        </li>
        @for (int i = Model.Page + 1; i <= Model.Page + 2; i++)
        {
            if (i <= Model.PagesCount)
            {
                <li class="page-item"><a class="page-link" asp-action="@Model.Action" asp-all-route-data="routs" asp-route-page="@i">@i</a></li>
            }
        }
        <li class="page-item @if (!Model.HasNextPage) {
        <text>disabled</text>
 }">
            <a class="page-link" asp-action="@Model.Action" asp-all-route-data="routs" asp-route-page="@Model.NextPageNumber" ><i class="fas fa-step-forward"></i></a>
        </li>
    </ul>
</nav>