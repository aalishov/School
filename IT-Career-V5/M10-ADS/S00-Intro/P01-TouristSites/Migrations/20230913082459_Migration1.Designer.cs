// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using P01_TouristSites.Data;

#nullable disable

namespace P01_TouristSites.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230913082459_Migration1")]
    partial class Migration1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("P01_TouristSites.Data.Models.BonusPrize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BonusPrizes");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Municipality")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Establishment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.SiteTourist", b =>
                {
                    b.Property<int>("TouristId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("TouristId", "SiteId");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteTourists");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.Tourist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Reward")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Tourists");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.TouristBonusPrize", b =>
                {
                    b.Property<int>("TouristId")
                        .HasColumnType("int");

                    b.Property<int>("BonusPrizeId")
                        .HasColumnType("int");

                    b.HasKey("TouristId", "BonusPrizeId");

                    b.HasIndex("BonusPrizeId");

                    b.ToTable("TouristBonusPrizes");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.Site", b =>
                {
                    b.HasOne("P01_TouristSites.Data.Models.Category", "Category")
                        .WithMany("Sites")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P01_TouristSites.Data.Models.Location", "Location")
                        .WithMany("Sites")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.SiteTourist", b =>
                {
                    b.HasOne("P01_TouristSites.Data.Models.Site", "Site")
                        .WithMany("SitesTourists")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P01_TouristSites.Data.Models.Tourist", "Tourist")
                        .WithMany("SitesTourists")
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.TouristBonusPrize", b =>
                {
                    b.HasOne("P01_TouristSites.Data.Models.BonusPrize", "BonusPrize")
                        .WithMany("TouristsBonusPrizes")
                        .HasForeignKey("BonusPrizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P01_TouristSites.Data.Models.Tourist", "Tourist")
                        .WithMany("TouristsBonusPrizes")
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonusPrize");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.BonusPrize", b =>
                {
                    b.Navigation("TouristsBonusPrizes");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.Category", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.Location", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.Site", b =>
                {
                    b.Navigation("SitesTourists");
                });

            modelBuilder.Entity("P01_TouristSites.Data.Models.Tourist", b =>
                {
                    b.Navigation("SitesTourists");

                    b.Navigation("TouristsBonusPrizes");
                });
#pragma warning restore 612, 618
        }
    }
}
